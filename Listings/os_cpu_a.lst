


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ;*******************************************************
                       *************************************************
    3 00000000         ;                                                uC/OS-I
                       II
    4 00000000         ;                                          The Real-Time
                        Kernel
    5 00000000         ;
    6 00000000         ;
    7 00000000         ;                         (c) Copyright 2009-2015; Micri
                       um, Inc.; Weston, FL
    8 00000000         ;                    All rights reserved.  Protected by 
                       international copyright laws.
    9 00000000         ;
   10 00000000         ;                                           ARM Cortex-M
                       4 Port
   11 00000000         ;
   12 00000000         ; File      : OS_CPU_A.ASM
   13 00000000         ; Version   : V3.05.00
   14 00000000         ; By        : JJL
   15 00000000         ;             BAN
   16 00000000         ;
   17 00000000         ; For       : ARMv7 Cortex-M4
   18 00000000         ; Mode      : Thumb-2 ISA
   19 00000000         ; Toolchain : RealView Development Suite
   20 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   21 00000000         ;             ARM Developer Suite (ADS)
   22 00000000         ;             Keil uVision
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         ;
   25 00000000         
   26 00000000         ;*******************************************************
                       *************************************************
   27 00000000         ;                                          PUBLIC FUNCTI
                       ONS
   28 00000000         ;*******************************************************
                       *************************************************
   29 00000000         
   30 00000000                 IMPORT           OSRunning   ; External referenc
                                                            es
   31 00000000                 IMPORT           OSPrioCur
   32 00000000                 IMPORT           OSPrioHighRdy
   33 00000000                 IMPORT           OSTCBCurPtr
   34 00000000                 IMPORT           OSTCBHighRdyPtr
   35 00000000                 IMPORT           OSIntExit
   36 00000000                 IMPORT           OSTaskSwHook
   37 00000000                 IMPORT           OS_CPU_ExceptStkBase
   38 00000000         
   39 00000000         
   40 00000000                 EXPORT           OSStartHighRdy ; Functions decl
                                                            ared in this file
   41 00000000                 EXPORT           OSCtxSw
   42 00000000                 EXPORT           OSIntCtxSw
   43 00000000                 EXPORT           OS_CPU_PendSVHandler
   44 00000000         
   45 00000000                 IF               {FPU} != "SoftVFP"
   46 00000000                 EXPORT           OS_CPU_FP_Reg_Push



ARM Macro Assembler    Page 2 


   47 00000000                 EXPORT           OS_CPU_FP_Reg_Pop
   48 00000000                 ENDIF
   49 00000000         
   50 00000000         
   51 00000000         ;*******************************************************
                       *************************************************
   52 00000000         ;                                               EQUATES
   53 00000000         ;*******************************************************
                       *************************************************
   54 00000000         
   55 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   56 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   57 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   58 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   59 00000000         
   60 00000000 E000ED88 
                       CPU_CPACR
                               EQU              0xE000ED88  ; CPACR
   61 00000000 E000EF34 
                       CPU_FPCCR
                               EQU              0xE000EF34  ; FPCCR
   62 00000000         
   63 00000000         
   64 00000000         ;*******************************************************
                       *************************************************
   65 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   66 00000000         ;*******************************************************
                       *************************************************
   67 00000000         
   68 00000000                 PRESERVE8
   69 00000000                 THUMB
   70 00000000         
   71 00000000                 AREA             CODE, CODE, READONLY
   72 00000000         
   73 00000000         
   74 00000000         ;*******************************************************
                       *************************************************
   75 00000000         ;                                   FLOATING POINT REGIS
                       TERS PUSH
   76 00000000         ;                             void  OS_CPU_FP_Reg_Push (
                       CPU_STK  *stkPtr)
   77 00000000         ;
   78 00000000         ; Note(s) : 1) This function saves S0-S31, and FPSCR reg
                       isters of the Floating Point Unit.
   79 00000000         ;



ARM Macro Assembler    Page 3 


   80 00000000         ;           2) Pseudo-code is:
   81 00000000         ;              a) Get FPSCR register value;
   82 00000000         ;              b) Push value on process stack;
   83 00000000         ;              c) Push remaining regs S0-S31 on process 
                       stack;
   84 00000000         ;              d) Update OSTCBCurPtr->StkPtr;
   85 00000000         ;*******************************************************
                       *************************************************
   86 00000000         
   87 00000000                 IF               {FPU} != "SoftVFP"
   88 00000000         
   89 00000000         OS_CPU_FP_Reg_Push
   90 00000000 F3EF 8109       MRS              R1, PSP     ; PSP is process st
                                                            ack pointer
   91 00000004 B141            CBZ              R1, OS_CPU_FP_nosave ; Skip FP 
                                                            register save the f
                                                            irst time
   92 00000006         
   93 00000006 EEF1 1A10       VMRS             R1, FPSCR
   94 0000000A F840 1D04       STR              R1, [R0, #-4]!
   95 0000000E ED20 0A20       VSTMDB           R0!, {S0-S31}
   96 00000012 4941            LDR              R1, =OSTCBCurPtr
   97 00000014 680A            LDR              R2, [R1]
   98 00000016 6010            STR              R0, [R2]
   99 00000018         OS_CPU_FP_nosave
  100 00000018 4770            BX               LR
  101 0000001A         
  102 0000001A                 ENDIF
  103 0000001A         
  104 0000001A         
  105 0000001A         ;*******************************************************
                       *************************************************
  106 0000001A         ;                                   FLOATING POINT REGIS
                       TERS POP
  107 0000001A         ;                             void  OS_CPU_FP_Reg_Pop (C
                       PU_STK  *stkPtr)
  108 0000001A         ;
  109 0000001A         ; Note(s) : 1) This function restores S0-S31, and FPSCR 
                       registers of the Floating Point Unit.
  110 0000001A         ;
  111 0000001A         ;           2) Pseudo-code is:
  112 0000001A         ;              a) Restore regs S0-S31 of new process sta
                       ck;
  113 0000001A         ;              b) Restore FPSCR reg value
  114 0000001A         ;              c) Update OSTCBHighRdyPtr->StkPtr pointer
                        of new proces stack;
  115 0000001A         ;*******************************************************
                       *************************************************
  116 0000001A         
  117 0000001A                 IF               {FPU} != "SoftVFP"
  118 0000001A         
  119 0000001A         OS_CPU_FP_Reg_Pop
  120 0000001A ECB0 0A20       VLDMIA           R0!, {S0-S31}
  121 0000001E C802            LDMIA            R0!, {R1}
  122 00000020 EEE1 1A10       VMSR             FPSCR, R1
  123 00000024 493D            LDR              R1, =OSTCBHighRdyPtr
  124 00000026 680A            LDR              R2, [R1]
  125 00000028 6010            STR              R0, [R2]
  126 0000002A 4770            BX               LR



ARM Macro Assembler    Page 4 


  127 0000002C         
  128 0000002C                 ENDIF
  129 0000002C         
  130 0000002C         
  131 0000002C         ;*******************************************************
                       *************************************************
  132 0000002C         ;                                         START MULTITAS
                       KING
  133 0000002C         ;                                      void OSStartHighR
                       dy(void)
  134 0000002C         ;
  135 0000002C         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  136 0000002C         ;              the first task to start.
  137 0000002C         ;
  138 0000002C         ;           2) OSStartHighRdy() MUST:
  139 0000002C         ;              a) Setup PendSV exception priority to low
                       est;
  140 0000002C         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  141 0000002C         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
  142 0000002C         ;              d) Trigger PendSV exception;
  143 0000002C         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
  144 0000002C         ;*******************************************************
                       *************************************************
  145 0000002C         
  146 0000002C         
  147 0000002C         OSStartHighRdy
  148 0000002C B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  149 0000002E F64E 5022 
              F2CE 0000        MOV32            R0, NVIC_SYSPRI14 ; Set the Pen
                                                            dSV exception prior
                                                            ity
  150 00000036 F240 01FF 
              F2C0 0100        MOV32            R1, NVIC_PENDSV_PRI
  151 0000003E 7001            STRB             R1, [R0]
  152 00000040         
  153 00000040 F64E 5088 
              F2CE 0000        MOV32            R0, CPU_CPACR
  154 00000048 F441 0170       ORR              R1, R1, #(0xF << 20)
  155 0000004C 6001            STR              R1, [R0]
  156 0000004E         
  157 0000004E         
  158 0000004E F64E 7034 
              F2CE 0000        MOV32            R0, CPU_FPCCR
  159 00000056 6801            LDR              R1, [R0]
  160 00000058 F021 4140       BIC              R1, R1, #0xC0000000
  161 0000005C 6001            STR              R1, [R0]
  162 0000005E         
  163 0000005E F240 0000 
              F2C0 0000        MOV32            R0, OS_CPU_ExceptStkBase ; Init
                                                            ialize the MSP to t
                                                            he OS_CPU_ExceptStk
                                                            Base
  164 00000066 6801            LDR              R1, [R0]



ARM Macro Assembler    Page 5 


  165 00000068 F381 8808       MSR              MSP, R1
  166 0000006C         
  167 0000006C F240 0000 
              F2C0 0000        MOV32            R0, OSPrioCur ; OSPrioCur   = O
                                                            SPrioHighRdy;
  168 00000074 F240 0100 
              F2C0 0100        MOV32            R1, OSPrioHighRdy
  169 0000007C 780A            LDRB             R2, [R1]
  170 0000007E 7002            STRB             R2, [R0]
  171 00000080         
  172 00000080 F240 0500 
              F2C0 0500        MOV32            R5, OSTCBCurPtr
  173 00000088 F240 0100 
              F2C0 0100        MOV32            R1, OSTCBHighRdyPtr ; OSTCBCurP
                                                            tr = OSTCBHighRdyPt
                                                            r;
  174 00000090 680A            LDR              R2, [R1]
  175 00000092 602A            STR              R2, [R5]
  176 00000094         
  177 00000094 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            RdyPtr->StkPtr;
  178 00000096 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  179 0000009A         
  180 0000009A F04F 0002       MOV              R0, #2
  181 0000009E F380 8814       MSR              CONTROL, R0
  182 000000A2 F3BF 8F6F       ISB                          ; Sync instruction 
                                                            stream
  183 000000A6         
  184 000000A6 E8BD 0FF0       LDMFD            SP!, {R4-R11} ; Restore r4-11 f
                                                            rom new process sta
                                                            ck
  185 000000AA BC0F            LDMFD            SP!, {R0-R3} ; Restore r0, r3
  186 000000AC E8BD 5000       LDMFD            SP!, {R12, LR} 
                                                            ; Load R12 and LR
  187 000000B0 BC06            LDMFD            SP!, {R1, R2} ; Load PC and dis
                                                            card xPSR
  188 000000B2 B662            CPSIE            I
  189 000000B4 4708            BX               R1
  190 000000B6         
  191 000000B6         
  192 000000B6         ;*******************************************************
                       *************************************************
  193 000000B6         ;                       PERFORM A CONTEXT SWITCH (From t
                       ask level) - OSCtxSw()
  194 000000B6         ;
  195 000000B6         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  196 000000B6         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  197 000000B6         ;*******************************************************
                       *************************************************
  198 000000B6         
  199 000000B6         OSCtxSw
  200 000000B6 481A            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)



ARM Macro Assembler    Page 6 


  201 000000B8 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  202 000000BC 6001            STR              R1, [R0]
  203 000000BE 4770            BX               LR
  204 000000C0         
  205 000000C0         
  206 000000C0         ;*******************************************************
                       *************************************************
  207 000000C0         ;                   PERFORM A CONTEXT SWITCH (From inter
                       rupt level) - OSIntCtxSw()
  208 000000C0         ;
  209 000000C0         ; Note(s) : 1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  210 000000C0         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  211 000000C0         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  212 000000C0         ;*******************************************************
                       *************************************************
  213 000000C0         
  214 000000C0         OSIntCtxSw
  215 000000C0 4817            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  216 000000C2 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  217 000000C6 6001            STR              R1, [R0]
  218 000000C8 4770            BX               LR
  219 000000CA         
  220 000000CA         
  221 000000CA         ;*******************************************************
                       *************************************************
  222 000000CA         ;                                       HANDLE PendSV EX
                       CEPTION
  223 000000CA         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  224 000000CA         ;
  225 000000CA         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  226 000000CA         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  227 000000CA         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  228 000000CA         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  229 000000CA         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  230 000000CA         ;              a thread or occurs due to an interrupt or
                        exception.
  231 000000CA         ;
  232 000000CA         ;           2) Pseudo-code is:
  233 000000CA         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  234 000000CA         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  235 000000CA         ;              c) Save the process SP in its TCB, OSTCBC
                       urPtr->OSTCBStkPtr = SP;
  236 000000CA         ;              d) Call OSTaskSwHook();
  237 000000CA         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;



ARM Macro Assembler    Page 7 


  238 000000CA         ;              f) Get current ready thread TCB, OSTCBCur
                       Ptr = OSTCBHighRdyPtr;
  239 000000CA         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdyPtr->OSTCBStkPtr;
  240 000000CA         ;              h) Restore R4-R11 from new process stack;
                       
  241 000000CA         ;              i) Perform exception return which will re
                       store remaining context.
  242 000000CA         ;
  243 000000CA         ;           3) On entry into PendSV handler:
  244 000000CA         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  245 000000CA         ;                 xPSR, PC, LR, R12, R0-R3
  246 000000CA         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  247 000000CA         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  248 000000CA         ;              d) OSTCBCurPtr      points to the OS_TCB 
                       of the task to suspend
  249 000000CA         ;                 OSTCBHighRdyPtr  points to the OS_TCB 
                       of the task to resume
  250 000000CA         ;
  251 000000CA         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  252 000000CA         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  253 000000CA         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  254 000000CA         ;*******************************************************
                       *************************************************
  255 000000CA         
  256 000000CA         OS_CPU_PendSVHandler
  257 000000CA B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  258 000000CC F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  259 000000D0 E920 0FF0       STMFD            R0!, {R4-R11} ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  260 000000D4         
  261 000000D4 F240 0500 
              F2C0 0500        MOV32            R5, OSTCBCurPtr ; OSTCBCurPtr->
                                                            OSTCBStkPtr = SP;
  262 000000DC 682E            LDR              R6, [R5]
  263 000000DE 6030            STR              R0, [R6]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  264 000000E0         
  265 000000E0         ; At this point, entire context of process has been save
                       d
  266 000000E0 4674            MOV              R4, LR      ; Save LR exc_retur
                                                            n value
  267 000000E2 F7FF FFFE       BL               OSTaskSwHook ; OSTaskSwHook();
  268 000000E6         
  269 000000E6 F240 0000 
              F2C0 0000        MOV32            R0, OSPrioCur ; OSPrioCur   = O
                                                            SPrioHighRdy;
  270 000000EE F240 0100 



ARM Macro Assembler    Page 8 


              F2C0 0100        MOV32            R1, OSPrioHighRdy
  271 000000F6 780A            LDRB             R2, [R1]
  272 000000F8 7002            STRB             R2, [R0]
  273 000000FA         
  274 000000FA F240 0100 
              F2C0 0100        MOV32            R1, OSTCBHighRdyPtr ; OSTCBCurP
                                                            tr = OSTCBHighRdyPt
                                                            r;
  275 00000102 680A            LDR              R2, [R1]
  276 00000104 602A            STR              R2, [R5]
  277 00000106         
  278 00000106 F044 0EF4       ORR              LR, R4, #0xF4 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  279 0000010A 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            RdyPtr->StkPtr;
  280 0000010C E8B0 0FF0       LDMFD            R0!, {R4-R11} ; Restore r4-11 f
                                                            rom new process sta
                                                            ck
  281 00000110 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  282 00000114 B662            CPSIE            I
  283 00000116 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  284 00000118         
  285 00000118                 ALIGN
  286 00000118         
  287 00000118                 END
              00000000 
              00000000 
              E000ED04 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\os_cpu_a.d -o.\objects\os_cpu_a.o -I.\RTE\RTOS -I.\RT
E\_TIVA-C -I"D:\Shreyas Poyrekar\Program Files\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\C
ore\Include" -I"D:\Shreyas Poyrekar\Program Files\ARM\PACK\Keil\TM4C_DFP\1.1.0\
Device\Include\TM4C123" -I"D:\Shreyas Poyrekar\Program Files\ARM\PACK\Micrium\R
TOS\1.0.0\Software\uC-CPU" -I"D:\Shreyas Poyrekar\Program Files\ARM\PACK\Micriu
m\RTOS\1.0.0\Software\uC-CPU\ARM-Cortex-M4\RealView" -I"D:\Shreyas Poyrekar\Pro
gram Files\ARM\PACK\Micrium\RTOS\1.0.0\Software\uC-LIB" -I"D:\Shreyas Poyrekar\
Program Files\ARM\PACK\Micrium\RTOS\1.0.0\Software\uCOS-III\Ports\ARM-Cortex-M4
\Generic\RealView" -I"D:\Shreyas Poyrekar\Program Files\ARM\PACK\Micrium\RTOS\1
.0.0\Software\uCOS-III\Source" --predefine="__EVAL SETA 1" --predefine="__UVISI
ON_VERSION SETA 526" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 
1" --list=.\listings\os_cpu_a.lst "D:\Shreyas Poyrekar\Program Files\ARM\PACK\M
icrium\RTOS\1.0.0\Software\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView\os_cpu
_a.asm"



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CODE 00000000

Symbol: CODE
   Definitions
      At line 71 in file D:\Shreyas
   Uses
      None
Comment: CODE unused
OSCtxSw 000000B6

Symbol: OSCtxSw
   Definitions
      At line 199 in file D:\Shreyas
   Uses
      At line 41 in file D:\Shreyas
Comment: OSCtxSw used once
OSIntCtxSw 000000C0

Symbol: OSIntCtxSw
   Definitions
      At line 214 in file D:\Shreyas
   Uses
      At line 42 in file D:\Shreyas
Comment: OSIntCtxSw used once
OSStartHighRdy 0000002C

Symbol: OSStartHighRdy
   Definitions
      At line 147 in file D:\Shreyas
   Uses
      At line 40 in file D:\Shreyas
Comment: OSStartHighRdy used once
OS_CPU_FP_Reg_Pop 0000001A

Symbol: OS_CPU_FP_Reg_Pop
   Definitions
      At line 119 in file D:\Shreyas
   Uses
      At line 47 in file D:\Shreyas
Comment: OS_CPU_FP_Reg_Pop used once
OS_CPU_FP_Reg_Push 00000000

Symbol: OS_CPU_FP_Reg_Push
   Definitions
      At line 89 in file D:\Shreyas
   Uses
      At line 46 in file D:\Shreyas
Comment: OS_CPU_FP_Reg_Push used once
OS_CPU_FP_nosave 00000018

Symbol: OS_CPU_FP_nosave
   Definitions
      At line 99 in file D:\Shreyas
   Uses
      At line 91 in file D:\Shreyas
Comment: OS_CPU_FP_nosave used once
OS_CPU_PendSVHandler 000000CA

Symbol: OS_CPU_PendSVHandler



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 256 in file D:\Shreyas
   Uses
      At line 43 in file D:\Shreyas
Comment: OS_CPU_PendSVHandler used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

CPU_CPACR E000ED88

Symbol: CPU_CPACR
   Definitions
      At line 60 in file D:\Shreyas
   Uses
      At line 153 in file D:\Shreyas
Comment: CPU_CPACR used once
CPU_FPCCR E000EF34

Symbol: CPU_FPCCR
   Definitions
      At line 61 in file D:\Shreyas
   Uses
      At line 158 in file D:\Shreyas
Comment: CPU_FPCCR used once
NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 55 in file D:\Shreyas
   Uses
      At line 200 in file D:\Shreyas
      At line 215 in file D:\Shreyas

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 58 in file D:\Shreyas
   Uses
      At line 201 in file D:\Shreyas
      At line 216 in file D:\Shreyas

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 57 in file D:\Shreyas
   Uses
      At line 150 in file D:\Shreyas
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 56 in file D:\Shreyas
   Uses
      At line 149 in file D:\Shreyas
Comment: NVIC_SYSPRI14 used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 35 in file D:\Shreyas
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 31 in file D:\Shreyas
   Uses
      At line 167 in file D:\Shreyas
      At line 269 in file D:\Shreyas

OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 32 in file D:\Shreyas
   Uses
      At line 168 in file D:\Shreyas
      At line 270 in file D:\Shreyas

OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 30 in file D:\Shreyas
   Uses
      None
Comment: OSRunning unused
OSTCBCurPtr 00000000

Symbol: OSTCBCurPtr
   Definitions
      At line 33 in file D:\Shreyas
   Uses
      At line 96 in file D:\Shreyas
      At line 172 in file D:\Shreyas
      At line 261 in file D:\Shreyas

OSTCBHighRdyPtr 00000000

Symbol: OSTCBHighRdyPtr
   Definitions
      At line 34 in file D:\Shreyas
   Uses
      At line 123 in file D:\Shreyas
      At line 173 in file D:\Shreyas
      At line 274 in file D:\Shreyas

OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 36 in file D:\Shreyas



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Uses
      At line 267 in file D:\Shreyas
Comment: OSTaskSwHook used once
OS_CPU_ExceptStkBase 00000000

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 37 in file D:\Shreyas
   Uses
      At line 163 in file D:\Shreyas
Comment: OS_CPU_ExceptStkBase used once
8 symbols
359 symbols in table
